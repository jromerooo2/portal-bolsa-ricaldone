generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model AditionalSkills {
  idAskills   Int         @id(map: "PK__Aditiona__88B395ABD1434A91") @default(autoincrement())
  NameSkill   String?     @db.VarChar(50)
  idLevel     Int?
  idPostulant Int?
  Levels      Levels?     @relation(fields: [idLevel], references: [idLevel], onDelete: NoAction, onUpdate: NoAction, map: "fk_AditionalSkillsLevel")
  Postulants  Postulants? @relation(fields: [idPostulant], references: [idPostulant], onDelete: NoAction, onUpdate: NoAction, map: "fk_Postulant_aditionalSkills")
}

model Branches {
  idBranch    Int         @id(map: "PK__Branches__A33E4FC4BE6F6313") @default(autoincrement())
  Branch      String?     @db.VarChar(50)
  idLevel     Int?
  idPostulant Int?
  Levels      Levels?     @relation(fields: [idLevel], references: [idLevel], onDelete: NoAction, onUpdate: NoAction, map: "fk_BranchesLevel")
  Postulants  Postulants? @relation(fields: [idPostulant], references: [idPostulant], onDelete: NoAction, onUpdate: NoAction, map: "fk_Postulant_branches")
}

model Departments {
  idDepartment                                   Int          @id(map: "PK__Departme__FE2F97952044EA84") @default(autoincrement())
  Department                                     String?      @db.VarChar(80)
  Postulants_DepartmentsToPostulants_IDepartment Postulants[] @relation("DepartmentsToPostulants_IDepartment")
  Postulants_DepartmentsToPostulants_RDepartment Postulants[] @relation("DepartmentsToPostulants_RDepartment")
}

model Genders {
  idGender    Int           @id(map: "PK__Genders__85D20780D69634CA") @default(autoincrement())
  Gender      String?       @db.VarChar(14)
  Postulants  Postulants[]
  UserSystems UserSystems[]
}

model GeneralSkills {
  idGskill    Int         @id(map: "PK__GeneralS__1783224D46AF1AE9") @default(autoincrement())
  Skill       String?     @db.VarChar(Max)
  idLevel     Int?
  idPostulant Int?
  Levels      Levels?     @relation(fields: [idLevel], references: [idLevel], onDelete: NoAction, onUpdate: NoAction, map: "fk_GeneralSkillsLevels")
  Postulants  Postulants? @relation(fields: [idPostulant], references: [idPostulant], onDelete: NoAction, onUpdate: NoAction, map: "fk_Postulant_GeneralSkills")
}

model Levels {
  idLevel         Int               @id(map: "PK__Levels__995F5B348765ACE8") @default(autoincrement())
  Levels          String?           @db.VarChar(30)
  AditionalSkills AditionalSkills[]
  Branches        Branches[]
  GeneralSkills   GeneralSkills[]
}

model Moderations {
  idMod         Int          @id(map: "PK__Moderati__3DC69A5DC68B0CD5") @default(autoincrement())
  idPostulant   Int?
  dateMod       DateTime?    @db.Date
  context       String?      @db.VarChar(Max)
  request       String?      @db.VarChar(Max)
  requestedInfo String?      @db.VarChar(Max)
  idUserSystem  Int?
  Postulants    Postulants?  @relation(fields: [idPostulant], references: [idPostulant], onDelete: NoAction, onUpdate: NoAction, map: "fk_ModerationsPostulants")
  UserSystems   UserSystems? @relation(fields: [idUserSystem], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "fk_ModerationUserSystem")
}

model Postulants {
  idPostulant                                     Int               @id(map: "PK__Postulan__35484EE88041F3FE") @default(autoincrement())
  namePostulant                                   String?           @db.VarChar(30)
  mailPostulant                                   String?           @db.VarChar(45)
  Pword                                           String?           @db.VarChar(10)
  photoPostulant                                  String?           @db.VarChar(Max)
  resumePDF                                       String?           @db.VarChar(Max)
  resumeDetails                                   String?           @db.VarChar(Max)
  mailverification                                Boolean?
  Gender                                          Int?
  States                                          Int?
  Alumni                                          Boolean?
  RDepartment                                     Int?
  IDepartment                                     Int?
  WSubject                                        Int?
  Progress                                        Int?
  Salary                                          Int?
  HighType                                        Int?
  ContractType                                    Int?
  WorkPreference                                  Int?
  StudyLevel                                      Int?
  WorkStatus                                      Int?
  lastName                                        String?           @db.VarChar(30)
  ContractType_ContractTypeToPostulants           ContractType?     @relation(fields: [ContractType], references: [idContractT], onDelete: NoAction, onUpdate: NoAction, map: "fkTipoContrato")
  Genders                                         Genders?          @relation(fields: [Gender], references: [idGender], onDelete: NoAction, onUpdate: NoAction, map: "fk_PostulantsGender")
  HighType_HighTypeToPostulants                   HighType?         @relation(fields: [HighType], references: [idType], onDelete: NoAction, onUpdate: NoAction, map: "fkHighType")
  Departments_DepartmentsToPostulants_IDepartment Departments?      @relation("DepartmentsToPostulants_IDepartment", fields: [IDepartment], references: [idDepartment], onDelete: NoAction, onUpdate: NoAction, map: "fk_postulantsIDDepartment")
  Progress_PostulantsToProgress                   Progress?         @relation(fields: [Progress], references: [idProgress], onDelete: NoAction, onUpdate: NoAction, map: "fk_postulantsProgress")
  Departments_DepartmentsToPostulants_RDepartment Departments?      @relation("DepartmentsToPostulants_RDepartment", fields: [RDepartment], references: [idDepartment], onDelete: NoAction, onUpdate: NoAction, map: "fk_postulantsRDepartment")
  SalaryState                                     SalaryState?      @relation(fields: [Salary], references: [idSalary], onDelete: NoAction, onUpdate: NoAction, map: "fkSalaryStatus")
  StudyLevels                                     StudyLevels?      @relation(fields: [StudyLevel], references: [idSLevel], onDelete: NoAction, onUpdate: NoAction, map: "fkNivelEstudiante")
  workSubjects                                    workSubjects?     @relation(fields: [WSubject], references: [idSubject], onDelete: NoAction, onUpdate: NoAction, map: "fk_postulantsWSubject")
  WorkPreference_PostulantsToWorkPreference       WorkPreference?   @relation(fields: [WorkPreference], references: [idPreference], onDelete: NoAction, onUpdate: NoAction, map: "fkPreferenciaTrabajo")
  WorkState                                       WorkState?        @relation(fields: [WorkStatus], references: [idWorkSatet], onDelete: NoAction, onUpdate: NoAction, map: "fkStatusWork")
  AditionalSkills                                 AditionalSkills[]
  Branches                                        Branches[]
  GeneralSkills                                   GeneralSkills[]
  Moderations                                     Moderations[]
}

model Progress {
  idProgress Int          @id(map: "PK__Progress__499DE999FAA7705E") @default(autoincrement())
  Progress   String?      @db.VarChar(30)
  Postulants Postulants[]
}

model Rols {
  idRol       Int           @id(map: "PK__Rols__3C872F765EF2A263") @default(autoincrement())
  Rol         String?       @db.VarChar(30)
  UserSystems UserSystems[]
}

model States {
  idState     Int           @id(map: "PK__States__98CB3723207CFA9E") @default(autoincrement())
  States      String?       @db.VarChar(30)
  UserSystems UserSystems[]
}

model UserSystems {
  idUser           Int           @id(map: "PK__UserSyst__3717C9821BDC7008") @default(autoincrement())
  idState          Int?
  nameUser         String?       @db.VarChar(30)
  Pword            String?       @db.VarChar(250)
  mailUser         String?       @db.VarChar(45)
  numberUser       Decimal?      @db.Decimal(8, 0)
  idRol            Int?
  mailverification Boolean?
  idGender         Int?
  Genders          Genders?      @relation(fields: [idGender], references: [idGender], onDelete: NoAction, onUpdate: NoAction, map: "fk_uSystemGender")
  Rols             Rols?         @relation(fields: [idRol], references: [idRol], onDelete: NoAction, onUpdate: NoAction, map: "fk_uSystemRol")
  States           States?       @relation(fields: [idState], references: [idState], onDelete: NoAction, onUpdate: NoAction, map: "fk_uSystemState")
  Moderations      Moderations[]
}

model workSubjects {
  idSubject   Int          @id(map: "PK__workSubj__A324CF9E4FF750F6") @default(autoincrement())
  WorkSubject String?      @db.VarChar(100)
  Postulants  Postulants[]
}

model ContractType {
  idContractT Int          @id(map: "PK__Contract__EB98699F436F0471") @default(autoincrement())
  WType       String?      @db.VarChar(50)
  Postulants  Postulants[]
}

model HighType {
  idType     Int          @id(map: "PK__HighType__4BB98BC6292427AE") @default(autoincrement())
  HighType   String?      @db.VarChar(50)
  Postulants Postulants[]
}

model SalaryState {
  idSalary   Int          @id(map: "PK__SalarySt__BDC60297D4BFDB4B") @default(autoincrement())
  Salary     String?      @db.VarChar(50)
  Postulants Postulants[]
}

model StudyLevels {
  idSLevel   Int          @id(map: "PK__StudyLev__92F4D6349826B2A4") @default(autoincrement())
  studyLevel String?      @db.VarChar(50)
  Postulants Postulants[]
}

model WorkPreference {
  idPreference Int          @id(map: "PK__WorkPref__DA6659E3F2A32186") @default(autoincrement())
  WPreference  String?      @db.VarChar(50)
  Postulants   Postulants[]
}

model WorkState {
  idWorkSatet Int          @id(map: "PK__WorkStat__F4CA258ED4A6B881") @default(autoincrement())
  WorkState   String?      @db.VarChar(50)
  Postulants  Postulants[]
}
